{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/utils/pinecone.ts"],"sourcesContent":["import { Pinecone } from '@pinecone-database/pinecone';\n\ninterface MemoryContext {\n  stars: number;\n  forks: number;\n  language: string;\n  topics: string[];\n}\n\ninterface MemoryMetadata {\n  text: string;\n  type: 'chat' | 'repository';\n  timestamp: number;\n  repoUrl?: string;\n  context?: MemoryContext;\n}\n\ntype RecordValue = string | number | boolean | string[];\n\ninterface PineconeMetadata {\n  [key: string]: RecordValue;\n  text: string;\n  type: string;\n  timestamp: number;\n}\n\ntype PineconeMatch = {\n  metadata?: PineconeMetadata;\n};\n\nlet pineconeClient: Pinecone | null = null;\n\nasync function initPinecone() {\n  if (!pineconeClient) {\n    pineconeClient = new Pinecone({\n      apiKey: process.env.PINECONE_API_KEY || ''\n    });\n  }\n  return pineconeClient;\n}\n\nconst INDEX_NAME = 'rapy-chat-memory';\n\nexport async function initializeIndex() {\n  try {\n    const pc = await initPinecone();\n    const indexes = await pc.listIndexes();\n    const existingIndexes = Array.isArray(indexes) ? indexes : [];\n    \n    if (!existingIndexes.some((index: string) => index === INDEX_NAME)) {\n      console.log('Creating new Pinecone index:', INDEX_NAME);\n      await pc.createIndex({\n        name: INDEX_NAME,\n        spec: {\n          serverless: {\n            cloud: 'aws',\n            region: 'us-west-2'\n          }\n        }\n      });\n      console.log('Index created successfully');\n    } else {\n      console.log('Index already exists:', INDEX_NAME);\n    }\n  } catch (error) {\n    console.error('Error initializing Pinecone index:', error);\n    throw error;\n  }\n}\n\nexport async function storeMemory(\n  text: string,\n  metadata: MemoryMetadata\n) {\n  const pc = await initPinecone();\n  const index = pc.Index(INDEX_NAME);\n  \n  // For demonstration, we're using a simple hash as vector\n  // In production, you should use proper text embeddings\n  const vector = Array(768).fill(0).map(() => Math.random());\n  \n  const memoryMetadata: Record<string, RecordValue> = {\n    text,\n    type: metadata.type,\n    timestamp: metadata.timestamp,\n    ...(metadata.repoUrl ? { repoUrl: metadata.repoUrl } : {}),\n    ...(metadata.context ? {\n      stars: metadata.context.stars.toString(),\n      forks: metadata.context.forks.toString(),\n      language: metadata.context.language,\n      topics: metadata.context.topics\n    } : {})\n  };\n\n  await index.upsert([{\n    id: `mem_${Date.now()}_${Math.random().toString(36).slice(2)}`,\n    values: vector,\n    metadata: memoryMetadata\n  }]);\n}\n\nexport async function queryMemory(query: string, repoUrl?: string) {\n  const pc = await initPinecone();\n  const index = pc.Index(INDEX_NAME);\n  \n  // For demonstration, using random vector\n  // In production, generate proper query embeddings\n  const queryVector = Array(768).fill(0).map(() => Math.random());\n  \n  const queryResponse = await index.query({\n    vector: queryVector,\n    filter: repoUrl ? { repoUrl } : undefined,\n    topK: 5,\n    includeMetadata: true\n  });\n\n  return queryResponse.matches?.map(match => {\n    if (!match.metadata) return null;\n    \n    const metadata: MemoryMetadata = {\n      text: match.metadata.text.toString(),\n      type: match.metadata.type.toString() as 'chat' | 'repository',\n      timestamp: parseInt(match.metadata.timestamp.toString(), 10),\n      ...(match.metadata.repoUrl ? { repoUrl: match.metadata.repoUrl.toString() } : {})\n    };\n\n    const stars = match.metadata.stars ? parseInt(match.metadata.stars.toString(), 10) : null;\n    if (stars !== null) {\n      metadata.context = {\n        stars,\n        forks: match.metadata.forks ? parseInt(match.metadata.forks.toString(), 10) : 0,\n        language: typeof match.metadata.language === 'string' ? match.metadata.language : 'unknown',\n        topics: Array.isArray(match.metadata.topics) ? match.metadata.topics : []\n      };\n    }\n\n    return metadata;\n  }).filter((item): item is MemoryMetadata => item !== null) || [];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/utils/init.ts"],"sourcesContent":["import { initializeIndex } from './pinecone';\n\nexport async function initializeServices() {\n  try {\n    await initializeIndex();\n    console.log('✅ Pinecone index initialized successfully');\n  } catch (error) {\n    console.error('❌ Failed to initialize Pinecone index:', error);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,wHAAA,CAAA,kBAAe,AAAD;QACpB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;IAC1D;AACF","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Geist as GeistSans, Geist_Mono as GeistMono } from \"next/font/google\";\nimport { initializeServices } from './utils/init';\nimport \"./globals.css\";\n\n// Initialize services on the server side only\nif (typeof window === 'undefined') {\n  initializeServices().catch(console.error);\n}\n\nconst geistSans = GeistSans({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = GeistMono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"ANAREPO - AI-Powered GitHub Repository Analysis\",\n  description: \"Evaluate and analyze GitHub repositories with Rapy, your AI assistant for open-source intelligence.\",\n};\n\nexport default function RootLayout({children}: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={`${geistSans.variable} ${geistMono.variable}`}>\n      <body className=\"min-h-screen bg-gradient-to-b from-purple-50 to-white dark:from-purple-950 dark:to-gray-900\">\n        {children}\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;;;;AAGA,8CAA8C;AAC9C,wCAAmC;IACjC,CAAA,GAAA,oHAAA,CAAA,qBAAkB,AAAD,IAAI,KAAK,CAAC,QAAQ,KAAK;AAC1C;AAYO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EAAC,QAAQ,EAAgC;IAC1E,qBACE,8OAAC;QAAK,MAAK;QAAK,WAAW,GAAG,yIAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,8IAAA,CAAA,UAAS,CAAC,QAAQ,EAAE;kBACtE,cAAA,8OAAC;YAAK,WAAU;sBACb;;;;;;;;;;;AAIT","debugId":null}}]
}