{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/utils/github.ts"],"sourcesContent":["interface GitHubIssue {\n  state: 'open' | 'closed';\n}\n\ninterface GitHubContributor {\n  login: string;\n  contributions: number;\n}\n\ninterface GitHubRepo {\n  name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  updated_at: string;\n  language: string;\n  topics: string[];\n  default_branch: string;\n  created_at: string;\n  homepage: string | null;\n  size: number;\n  watchers_count: number;\n}\n\nexport async function analyzeRepository(owner: string, repo: string) {\n  const headers = {\n    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,\n    'Accept': 'application/vnd.github.v3+json',\n  };\n\n  try {\n    // Get repository info\n    const repoResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}`, { headers });\n    if (!repoResponse.ok) {\n      throw new Error(`Failed to fetch repository: ${repoResponse.statusText}`);\n    }\n    const repoData = await repoResponse.json() as GitHubRepo;\n\n    // Validate repository data\n    if (!repoData || !repoData.name) {\n      throw new Error('Invalid repository data received');\n    }\n\n    // Get recent commits with pagination\n    const commitsResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/commits?per_page=100`, { headers });\n    if (!commitsResponse.ok) {\n      throw new Error(`Failed to fetch commits: ${commitsResponse.statusText}`);\n    }\n    const commitsData = await commitsResponse.json();\n    if (!Array.isArray(commitsData)) {\n      throw new Error('Invalid commits data received');\n    }\n\n    // Get issues with error handling\n    const issuesResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues?state=all&per_page=100`, { headers });\n    if (!issuesResponse.ok) {\n      throw new Error(`Failed to fetch issues: ${issuesResponse.statusText}`);\n    }\n    const issuesData = await issuesResponse.json();\n    if (!Array.isArray(issuesData)) {\n      throw new Error('Invalid issues data received');\n    }\n\n    // Get contributors with validation\n    const contributorsResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/contributors?per_page=100`, { headers });\n    if (!contributorsResponse.ok) {\n      throw new Error(`Failed to fetch contributors: ${contributorsResponse.statusText}`);\n    }\n    const contributorsData = await contributorsResponse.json();\n    if (!Array.isArray(contributorsData)) {\n      throw new Error('Invalid contributors data received');\n    }\n\n    // Get languages with type checking\n    const languagesResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/languages`, { headers });\n    if (!languagesResponse.ok) {\n      throw new Error(`Failed to fetch languages: ${languagesResponse.statusText}`);\n    }\n    const languagesData = await languagesResponse.json();\n    if (typeof languagesData !== 'object' || languagesData === null) {\n      throw new Error('Invalid languages data received');\n    }\n\n    // Get releases with error handling\n    const releasesResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/releases?per_page=5`, { headers });\n    if (!releasesResponse.ok) {\n      throw new Error(`Failed to fetch releases: ${releasesResponse.statusText}`);\n    }\n    const releasesData = await releasesResponse.json();\n    if (!Array.isArray(releasesData)) {\n      throw new Error('Invalid releases data received');\n    }\n\n    // Calculate activity metrics\n    const now = new Date();\n    const recentCommits = commitsData.filter((commit: any) => {\n      const commitDate = new Date(commit.commit.author.date);\n      const daysDiff = (now.getTime() - commitDate.getTime()) / (1000 * 60 * 60 * 24);\n      return daysDiff <= 30; // Last 30 days\n    });\n\n    // Sort languages by usage\n    const sortedLanguages = Object.entries(languagesData)\n      .sort(([, a], [, b]) => (b as number) - (a as number))\n      .map(([name]) => name);\n\n    return {\n      repository: {\n        name: repoData.name,\n        description: repoData.description || 'No description available',\n        stars: repoData.stargazers_count,\n        forks: repoData.forks_count,\n        watchers: repoData.watchers_count,\n        openIssues: repoData.open_issues_count,\n        lastUpdated: repoData.updated_at,\n        createdAt: repoData.created_at,\n        language: repoData.language || 'Not specified',\n        topics: repoData.topics || [],\n        homepage: repoData.homepage,\n        size: repoData.size,\n        defaultBranch: repoData.default_branch,\n      },\n      activity: {\n        totalContributors: contributorsData.length,\n        recentCommits: recentCommits.length,\n        commitFrequency: (recentCommits.length / 30).toFixed(2), // Commits per day\n        issuesHealth: {\n          total: issuesData.length,\n          open: issuesData.filter(issue => issue.state === 'open').length,\n          closed: issuesData.filter(issue => issue.state === 'closed').length,\n          closeRate: issuesData.length > 0 ? \n            (issuesData.filter(issue => issue.state === 'closed').length / issuesData.length * 100).toFixed(1) + '%' : '0%',\n        },\n        releases: releasesData.length,\n        lastRelease: releasesData[0]?.published_at || null,\n      },\n      technologies: {\n        primaryLanguage: repoData.language,\n        allLanguages: sortedLanguages,\n        topics: repoData.topics || [],\n      },\n      contributors: contributorsData.slice(0, 10).map(contributor => ({\n        username: contributor.login,\n        contributions: contributor.contributions,\n        profile: `https://github.com/${contributor.login}`,\n      })),\n    };\n  } catch (error) {\n    console.error('Error analyzing repository:', error);\n    throw new Error('Failed to analyze repository');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/utils/openai.ts"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport async function generateResponse(\n  message: string,\n  context: {\n    memories?: Array<{\n      text: string;\n      type: 'chat' | 'repository';\n      timestamp: number;\n      repoUrl?: string;\n    }>;\n    repoAnalysis?: {\n      repository: {\n        name: string;\n        description: string;\n        stars: number;\n        forks: number;\n        lastUpdated: string;\n        language: string;\n      };\n      activity: {\n        totalContributors: number;\n        issuesHealth: {\n          total: number;\n          open: number;\n          closed: number;\n        };\n      };\n      contributors: Array<{\n        username: string;\n        contributions: number;\n      }>;\n    };\n  },\n  chatHistory: ChatMessage[] = []\n) {\n  try {\n    // Build a structured prompt\n    let systemPrompt = `You are Rapy, an AI assistant specialized in analyzing GitHub repositories and helping developers make informed decisions about open-source projects.\n\nYour capabilities include:\n1. Analyzing repository metrics and health\n2. Evaluating code quality and maintenance\n3. Assessing community engagement\n4. Providing insights on technology stacks\n5. Comparing similar repositories\n\nWhen analyzing a repository, always consider:\n- Activity level and maintenance status\n- Community size and engagement\n- Code quality and documentation\n- Technology choices and best practices\n- Security and stability\n\nProvide clear, specific, and actionable insights.`;\n\n    let prompt = '';\n\n    if (context.repoAnalysis) {\n      const { repository, activity, contributors } = context.repoAnalysis;\n      prompt = `Repository Context:\n\n1. Basic Information:\n- Name: ${repository.name}\n- Description: ${repository.description}\n- Primary Language: ${repository.language}\n- Stars: ${repository.stars}\n- Forks: ${repository.forks}\n\n2. Activity Metrics:\n- Total Contributors: ${activity.totalContributors}\n- Issue Health: ${activity.issuesHealth.closed} closed, ${activity.issuesHealth.open} open\n- Last Updated: ${repository.lastUpdated}\n\n3. Top Contributors:\n${contributors.slice(0, 3).map(c => `- ${c.username}: ${c.contributions} contributions`).join('\\n')}\n\nUser Question: ${message}\n\nProvide a detailed analysis focusing on the specific aspects the user is asking about. Include relevant metrics and actionable insights.`;\n    } else {\n      prompt = message;\n    }\n\n    // Add memory context if available\n    const memories = context.memories || [];\n    if (memories.length > 0) {\n      prompt = `Previous Relevant Context:\n${memories.map(m => `- ${m.text}`).join('\\n')}\n\n${prompt}`;\n    }\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4',  // Using GPT-4 for better analysis\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt\n        },\n        ...chatHistory.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })),\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      temperature: 0.3,  // Lower temperature for more focused responses\n      max_tokens: 2000,  // Increased token limit for detailed responses\n      presence_penalty: 0.3,  // Slight penalty to prevent repetition\n      frequency_penalty: 0.3   // Encourage diverse language\n    });\n\n    return response.choices[0]?.message?.content || 'I apologize, but I was unable to generate a response.';\n  } catch (error) {\n    console.error('Error generating response:', error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAOO,eAAe,iBACpB,OAAe,EACf,OA6BC,EACD,cAA6B,EAAE;IAE/B,IAAI;QACF,4BAA4B;QAC5B,IAAI,eAAe,CAAC;;;;;;;;;;;;;;;;iDAgByB,CAAC;QAE9C,IAAI,SAAS;QAEb,IAAI,QAAQ,YAAY,EAAE;YACxB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,QAAQ,YAAY;YACnE,SAAS,CAAC;;;QAGR,EAAE,WAAW,IAAI,CAAC;eACX,EAAE,WAAW,WAAW,CAAC;oBACpB,EAAE,WAAW,QAAQ,CAAC;SACjC,EAAE,WAAW,KAAK,CAAC;SACnB,EAAE,WAAW,KAAK,CAAC;;;sBAGN,EAAE,SAAS,iBAAiB,CAAC;gBACnC,EAAE,SAAS,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,YAAY,CAAC,IAAI,CAAC;gBACrE,EAAE,WAAW,WAAW,CAAC;;;AAGzC,EAAE,aAAa,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA,IAAK,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,MAAM;;eAErF,EAAE,QAAQ;;wIAE+G,CAAC;QACrI,OAAO;YACL,SAAS;QACX;QAEA,kCAAkC;QAClC,MAAM,WAAW,QAAQ,QAAQ,IAAI,EAAE;QACvC,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,SAAS,CAAC;AAChB,EAAE,SAAS,GAAG,CAAC,CAAA,IAAK,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM;;AAE9C,EAAE,QAAQ;QACN;QAEA,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS;gBACX;mBACG,YAAY,GAAG,CAAC,CAAA,MAAO,CAAC;wBACzB,MAAM,IAAI,IAAI;wBACd,SAAS,IAAI,OAAO;oBACtB,CAAC;gBACD;oBACE,MAAM;oBACN,SAAS;gBACX;aACD;YACD,aAAa;YACb,YAAY;YACZ,kBAAkB;YAClB,mBAAmB,IAAM,6BAA6B;QACxD;QAEA,OAAO,SAAS,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/utils/pinecone.ts"],"sourcesContent":["import { Pinecone } from '@pinecone-database/pinecone';\n\ninterface MemoryContext {\n  stars: number;\n  forks: number;\n  language: string;\n  topics: string[];\n}\n\ninterface MemoryMetadata {\n  text: string;\n  type: 'chat' | 'repository';\n  timestamp: number;\n  repoUrl?: string;\n  context?: MemoryContext;\n}\n\ntype RecordValue = string | number | boolean | string[];\n\ninterface PineconeMetadata {\n  [key: string]: RecordValue;\n  text: string;\n  type: string;\n  timestamp: number;\n}\n\ntype PineconeMatch = {\n  metadata?: PineconeMetadata;\n};\n\nlet pineconeClient: Pinecone | null = null;\n\nasync function initPinecone() {\n  if (!pineconeClient) {\n    pineconeClient = new Pinecone({\n      apiKey: process.env.PINECONE_API_KEY || ''\n    });\n  }\n  return pineconeClient;\n}\n\nconst INDEX_NAME = 'rapy-chat-memory';\n\nexport async function initializeIndex() {\n  try {\n    const pc = await initPinecone();\n    const indexes = await pc.listIndexes();\n    const existingIndexes = Array.isArray(indexes) ? indexes : [];\n    \n    if (!existingIndexes.some((index: string) => index === INDEX_NAME)) {\n      console.log('Creating new Pinecone index:', INDEX_NAME);\n      await pc.createIndex({\n        name: INDEX_NAME,\n        spec: {\n          serverless: {\n            cloud: 'aws',\n            region: 'us-west-2'\n          }\n        }\n      });\n      console.log('Index created successfully');\n    } else {\n      console.log('Index already exists:', INDEX_NAME);\n    }\n  } catch (error) {\n    console.error('Error initializing Pinecone index:', error);\n    throw error;\n  }\n}\n\nexport async function storeMemory(\n  text: string,\n  metadata: MemoryMetadata\n) {\n  const pc = await initPinecone();\n  const index = pc.Index(INDEX_NAME);\n  \n  // For demonstration, we're using a simple hash as vector\n  // In production, you should use proper text embeddings\n  const vector = Array(768).fill(0).map(() => Math.random());\n  \n  const memoryMetadata: Record<string, RecordValue> = {\n    text,\n    type: metadata.type,\n    timestamp: metadata.timestamp,\n    ...(metadata.repoUrl ? { repoUrl: metadata.repoUrl } : {}),\n    ...(metadata.context ? {\n      stars: metadata.context.stars.toString(),\n      forks: metadata.context.forks.toString(),\n      language: metadata.context.language,\n      topics: metadata.context.topics\n    } : {})\n  };\n\n  await index.upsert([{\n    id: `mem_${Date.now()}_${Math.random().toString(36).slice(2)}`,\n    values: vector,\n    metadata: memoryMetadata\n  }]);\n}\n\nexport async function queryMemory(query: string, repoUrl?: string) {\n  const pc = await initPinecone();\n  const index = pc.Index(INDEX_NAME);\n  \n  // For demonstration, using random vector\n  // In production, generate proper query embeddings\n  const queryVector = Array(768).fill(0).map(() => Math.random());\n  \n  const queryResponse = await index.query({\n    vector: queryVector,\n    filter: repoUrl ? { repoUrl } : undefined,\n    topK: 5,\n    includeMetadata: true\n  });\n\n  return queryResponse.matches?.map(match => {\n    if (!match.metadata) return null;\n    \n    const metadata: MemoryMetadata = {\n      text: match.metadata.text.toString(),\n      type: match.metadata.type.toString() as 'chat' | 'repository',\n      timestamp: parseInt(match.metadata.timestamp.toString(), 10),\n      ...(match.metadata.repoUrl ? { repoUrl: match.metadata.repoUrl.toString() } : {})\n    };\n\n    const stars = match.metadata.stars ? parseInt(match.metadata.stars.toString(), 10) : null;\n    if (stars !== null) {\n      metadata.context = {\n        stars,\n        forks: match.metadata.forks ? parseInt(match.metadata.forks.toString(), 10) : 0,\n        language: typeof match.metadata.language === 'string' ? match.metadata.language : 'unknown',\n        topics: Array.isArray(match.metadata.topics) ? match.metadata.topics : []\n      };\n    }\n\n    return metadata;\n  }).filter((item): item is MemoryMetadata => item !== null) || [];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Afrin/Desktop/GitHub-Eval-Agent/anarepo/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { analyzeRepository } from '@/app/utils/github';\nimport { generateResponse, type ChatMessage } from '@/app/utils/openai';\nimport { queryMemory, storeMemory } from '@/app/utils/pinecone';\n\n// Helper functions for repository analysis\nfunction getActivityLevel(activity: any) {\n  const commitFrequency = parseFloat(activity.commitFrequency) || 0;\n  const hasRecentReleases = activity.releases > 0;\n  const issueCloseRate = parseFloat(activity.issuesHealth.closeRate) || 0;\n\n  if (commitFrequency > 1 && hasRecentReleases && issueCloseRate > 70) {\n    return 'Very Active - Daily commits, recent releases, and high issue resolution rate';\n  } else if (commitFrequency > 0.3 && issueCloseRate > 50) {\n    return 'Active - Regular updates and moderate issue handling';\n  } else if (commitFrequency > 0.1) {\n    return 'Moderately Active - Occasional updates';\n  } else {\n    return 'Low Activity - Infrequent updates';\n  }\n}\n\nfunction getCommunityLevel(repository: any, activity: any) {\n  const stars = repository.stars || 0;\n  const forks = repository.forks || 0;\n  const contributors = activity.totalContributors || 0;\n\n  if (stars > 1000 && forks > 100 && contributors > 10) {\n    return 'Strong - Large and active community';\n  } else if (stars > 100 && forks > 10 && contributors > 5) {\n    return 'Growing - Moderate community engagement';\n  } else if (stars > 10 && contributors > 1) {\n    return 'Emerging - Small but present community';\n  } else {\n    return 'Limited - Small community presence';\n  }\n}\n\nfunction getDocumentationLevel(repository: any, technologies: any) {\n  const hasTopics = technologies?.topics?.length > 0;\n  const hasDescription = repository.description && repository.description.length > 50;\n  const hasHomepage = repository.homepage;\n\n  if (hasTopics && hasDescription && hasHomepage) {\n    return 'Well Documented - Comprehensive information available';\n  } else if ((hasTopics && hasDescription) || (hasDescription && hasHomepage)) {\n    return 'Adequately Documented - Basic information provided';\n  } else if (hasDescription || hasTopics) {\n    return 'Minimally Documented - Limited information available';\n  } else {\n    return 'Poorly Documented - Missing crucial information';\n  }\n}\n\nfunction getMaintenanceLevel(activity: any) {\n  const issueCloseRate = parseFloat(activity.issuesHealth.closeRate) || 0;\n  const hasRecentCommits = activity.recentCommits > 0;\n  const hasRecentRelease = activity.lastRelease !== null;\n\n  if (issueCloseRate > 80 && hasRecentCommits && hasRecentRelease) {\n    return 'Well Maintained - Active development and issue resolution';\n  } else if (issueCloseRate > 50 && (hasRecentCommits || hasRecentRelease)) {\n    return 'Maintained - Regular updates and issue handling';\n  } else if (hasRecentCommits || issueCloseRate > 30) {\n    return 'Partially Maintained - Occasional updates';\n  } else {\n    return 'Poorly Maintained - Infrequent updates and low issue resolution';\n  }\n}\n\nfunction extractRepoInfo(url: string) {\n  try {\n    const match = url.match(/github\\.com\\/([\\w-]+)\\/([\\w-]+)/);\n    if (!match) return null;\n    return { owner: match[1], repo: match[2] };\n  } catch {\n    return null;\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    // Validate request body\n    const body = await request.json();\n    if (!body || typeof body !== 'object') {\n      return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });\n    }\n\n    const { message, repoUrl, chatHistory } = body as {\n      message: string;\n      repoUrl?: string;\n      chatHistory: ChatMessage[];\n    };\n\n    // Validate required fields\n    if (!message || typeof message !== 'string') {\n      return NextResponse.json({ error: 'Message is required and must be a string' }, { status: 400 });\n    }\n\n    if (repoUrl && typeof repoUrl !== 'string') {\n      return NextResponse.json({ error: 'Repository URL must be a string' }, { status: 400 });\n    }\n\n    if (!Array.isArray(chatHistory)) {\n      return NextResponse.json({ error: 'Chat history must be an array' }, { status: 400 });\n    }\n\n    // Query relevant memories with error handling\n    let relevantMemories: Array<{\n      text: string;\n      type: 'chat' | 'repository';\n      timestamp: number;\n      repoUrl?: string;\n      context?: {\n        stars?: number;\n        forks?: number;\n        language?: string;\n        topics?: string[];\n      };\n    }> = [];\n\n    try {\n      relevantMemories = await queryMemory(message, repoUrl);\n    } catch (error) {\n      console.error('Error querying memories:', error);\n      // Continue without memories if there's an error\n    }\n\n    // Extract owner and repo from GitHub URL if provided\n    let repoAnalysis = null;\n    if (repoUrl) {\n      const repoInfo = extractRepoInfo(repoUrl);\n      if (!repoInfo) {\n        return NextResponse.json({ error: 'Invalid GitHub repository URL' }, { status: 400 });\n      }\n      \n      try {\n        repoAnalysis = await analyzeRepository(repoInfo.owner, repoInfo.repo);\n      } catch (error) {\n        console.error('Error analyzing repository:', error);\n        return NextResponse.json({ error: 'Failed to analyze repository' }, { status: 500 });\n      }\n    }\n\n    // Prepare a detailed analysis prompt\n    let analysisPrompt = '';\n    if (repoAnalysis) {\n      const { repository, activity, technologies, contributors } = repoAnalysis;\n      analysisPrompt = `\nRepository Analysis:\n\n1. Overview:\n- Name: ${repository.name}\n- Description: ${repository.description}\n- Stars: ${repository.stars.toLocaleString()}\n- Forks: ${repository.forks.toLocaleString()}\n- Watchers: ${repository.watchers?.toLocaleString() || '0'}\n- Created: ${new Date(repository.createdAt).toLocaleDateString()}\n- Last Updated: ${new Date(repository.lastUpdated).toLocaleDateString()}\n\n2. Activity & Health:\n- Recent Commits (30 days): ${activity.recentCommits || 0}\n- Commit Frequency: ${activity.commitFrequency || '0'} commits/day\n- Total Contributors: ${activity.totalContributors}\n- Issues: ${activity.issuesHealth.open} open, ${activity.issuesHealth.closed} closed\n- Issue Close Rate: ${activity.issuesHealth.closeRate || '0%'}\n- Latest Release: ${activity.lastRelease ? new Date(activity.lastRelease).toLocaleDateString() : 'No releases'}\n\n3. Technology Stack:\n- Primary Language: ${technologies?.primaryLanguage || repository.language}\n- Languages Used: ${technologies?.allLanguages?.join(', ') || repository.language}\n- Topics: ${technologies?.topics?.length ? technologies.topics.join(', ') : 'None specified'}\n\n4. Top Contributors:\n${contributors.slice(0, 5).map(c => `- ${c.username} (${c.contributions} contributions)`).join('\\n')}\n\nAnalysis Summary:\n1. Project Activity: ${getActivityLevel(activity)}\n2. Community Support: ${getCommunityLevel(repository, activity)}\n3. Documentation: ${getDocumentationLevel(repository, technologies)}\n4. Maintenance: ${getMaintenanceLevel(activity)}`;\n    }\n\n    // Combine memories with analysis\n    const contextWithMemories = `Previous relevant interactions:\n${relevantMemories.map((mem: any) => mem.text).join('\\n')}${analysisPrompt}`;\n\n    const response = await generateResponse(\n      message,\n      {\n        memories: relevantMemories,\n        repoAnalysis: repoAnalysis || undefined\n      },\n      chatHistory\n    );\n\n    // Store the new interaction in memory with error handling\n    try {\n      const memoryText = `User: ${message}\\nAssistant: ${response}`;\n      const memoryMetadata: {\n        text: string;\n        type: 'chat' | 'repository';\n        timestamp: number;\n        repoUrl?: string;\n        context?: {\n          stars: number;\n          forks: number;\n          language: string;\n          topics: string[];\n        };\n      } = {\n        text: memoryText,\n        type: 'chat',\n        timestamp: Date.now(),\n        repoUrl,\n        context: repoAnalysis ? {\n          stars: repoAnalysis.repository.stars,\n          forks: repoAnalysis.repository.forks,\n          language: repoAnalysis.repository.language,\n          topics: repoAnalysis.technologies?.topics || []\n        } : undefined\n      };\n\n      await storeMemory(memoryText, memoryMetadata);\n    } catch (error) {\n      console.error('Error storing memory:', error);\n      // Continue even if memory storage fails\n    }\n\n    return NextResponse.json({ response });\n  } catch (error) {\n    console.error('Chat API error:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return NextResponse.json(\n      { \n        error: 'Failed to process chat request',\n        details: errorMessage,\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}